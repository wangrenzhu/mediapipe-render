# MediaPipe graph that performs face mesh with TensorFlow Lite on GPU.
max_queue_size: 1
num_threads: 1
# GPU buffer. (GpuBuffer)
# 256x256
input_stream: "segment_input_video" 
# 192x192 根据平台分流
input_stream: "pre_stream_landmark_video"


# Max number of faces to detect/process. (int)
input_side_packet: "num_faces"

input_stream: "use_segmentation"

input_stream: "use_landmarks"
input_side_packet: "vflip"

# Output image with rendered results. (GpuBuffer)
# output_stream: "output_video"
# Collection of detected/processed faces, each represented as a list of
# landmarks. (std::vector<NormalizedLandmarkList>)
output_stream: "multi_face_landmarks"

output_stream: "output_video"
output_stream: "segment_video"

# output_stream: "face_detections"


node {
  calculator: "FlowLimiterCalculator"
  input_stream: "pre_stream_landmark_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_pre_stream_landmark_video"
  options: {
    [mediapipe.FlowLimiterCalculatorOptions.ext] {
      max_in_flight: 1
      max_in_queue: 1
      in_flight_timeout: 30000
    }
  }
}

node {
  calculator: "GateCalculator"
  input_stream: "ALLOW:use_landmarks"
  input_stream: "throttled_pre_stream_landmark_video"
  output_stream: "throttled_landmarks_video"
}

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "throttled_segmentation_video"
  input_stream: "FINISHED:segment_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_segmentation_video2"
  options: {
    [mediapipe.FlowLimiterCalculatorOptions.ext] {
      max_in_flight: 1
      max_in_queue: 1
      in_flight_timeout: 30000
    }
  }
}

node {
  calculator: "GateCalculator"
  input_stream: "ALLOW:use_segmentation"
  input_stream: "segment_input_video"
  output_stream: "throttled_segmentation_video"
}

# Defines side packets for further use in the graph.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:smooth_segmentation"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { bool_value: true }
    }
  }
}

node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:with_attention"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { bool_value: true }
      # packet { bool_value: false }
    }
  }
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontGpu"
  input_stream: "IMAGE:transformed_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:multi_face_landmarks"
  output_stream: "ROIS_FROM_LANDMARKS:face_rects_from_landmarks"
  output_stream: "DETECTIONS:face_detections"
  output_stream: "ROIS_FROM_DETECTIONS:face_rects_from_detections"
}

# Merges a stream of hand rectangles generated by HandDetectionSubgraph and that
# generated by HandLandmarkSubgraph into a single output stream by selecting
# between one of the two streams. The former is selected if the incoming packet
# is not empty, i.e., hand detection is performed on the current image by
# HandDetectionSubgraph (because HandLandmarkSubgraph could not identify hand
# presence in the previous image). Otherwise, the latter is selected, which is
# never empty because HandLandmarkSubgraphs processes all images (that went
# through FlowLimiterCaculator).


node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:throttled_segmentation_video2"
  input_side_packet: "FLIP_VERTICALLY:vflip"
  output_stream: "IMAGE_GPU:throttled_segmentation_video3"
}

node {
  calculator: "SelfieSegmentationGpu"
  input_stream: "IMAGE:throttled_segmentation_video3"
  output_stream: "SEGMENTATION_MASK:segment_video_gpu"
  # output_stream: "SEGMENTATION_MASK:filtered_segmentation_mask"
}


# # Converts the incoming segmentation mask represented as an Image into the
# # corresponding GpuBuffer type.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE_GPU:throttled_pre_stream_landmark_video"
  # input_stream: "detections_render_data"
  # input_stream: "VECTOR:0:multi_face_landmarks_render_data"
  # input_stream: "rects_render_data"
  output_stream: "IMAGE_GPU:output_video"
}


node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:throttled_landmarks_video"
  input_side_packet: "FLIP_VERTICALLY:vflip"
  output_stream: "IMAGE_GPU:transformed_input_video"
}


# Subgraph that renders face-landmark annotation onto the input image.  //画标记 用于调试
# node {
#   calculator: "FaceRendererGpu"
#   input_stream: "IMAGE:transformed_input_video"
#   input_stream: "LANDMARKS:multi_face_landmarks"
#   input_stream: "NORM_RECTS:face_rects_from_landmarks"
#   input_stream: "DETECTIONS:face_detections"
#   output_stream: "IMAGE:output_video"
# }

# Draws annotations and overlays them on top of the input images.
# Smoothes segmentation to reduce jitter.
node {
  calculator: "PoseSegmentationFiltering"
  input_side_packet: "ENABLE:smooth_segmentation"
  input_stream: "SEGMENTATION_MASK:unfiltered_segmentation_mask"
  output_stream: "FILTERED_SEGMENTATION_MASK:filtered_segmentation_mask"
}

node {
  calculator: "ToImageCalculator"
  input_stream: "IMAGE_GPU:segment_video_gpu"
  output_stream: "IMAGE:unfiltered_segmentation_mask"
}

node: {
  calculator: "FromImageCalculator"
  input_stream: "IMAGE:filtered_segmentation_mask"
  output_stream: "IMAGE_GPU:filtered_segmentation_mask_out"
}

node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:filtered_segmentation_mask_out"
  input_side_packet: "FLIP_VERTICALLY:vflip"
  output_stream: "IMAGE_GPU:segment_video"
}



